def solution(v, e, m):
    """
    Перевіряє, чи є заданий орієнтований граф полуповним.

    Параметри:
    v (int): Кількість вершин у графі.
    e (int): Кількість ребер у графі.
    m (list of tuple of int): Список ребер, де кожне ребро представляється кортежем (i, j), що означає наявність ребра з вершини i в вершину j.

    Повертає:
    str: 'YES', якщо граф є полуповним, та 'NO' в іншому випадку.

    Опис:
    Орієнтований граф називається полуповним, якщо між будь-якою парою різних вершин існує хоча б одне ребро.
    Це означає, що для кожної вершини існує ребро до або від будь-якої іншої вершини.
    """
    # Створюємо список суміжності для графа, де кожна вершина графа має список вершин, до яких вона прямо з'єднана
    g = [[] for _ in range(v)]
    for i, j in m:
        g[i - 1].append(j - 1)
        g[j - 1].append(i - 1)

    # Перевіряємо, чи є граф полуповним
    for i in range(v):
        for j in range(v):
            if i == j:
                continue
            if j not in g[i]:
                # Якщо між вершинами i та j немає ребра, граф не є полуповним
                return 'NO'
    # Якщо всі вершини пов'язані, граф є полуповним
    return 'YES'


def main():
    n = int(input())
    for _ in range(n):
        v, e = map(int, input().split())
        m = [list(map(int, input().split())) for _ in range(e)]
        print(solution(v, e, m))


if __name__ == '__main__':
    main()
