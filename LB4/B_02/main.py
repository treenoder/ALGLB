def solution(n, m):
    """
    Перевіряє, чи може дана квадратна матриця розмірності NxN бути матрицею суміжності простого неорієнтованого графа.

    Параметри:
    n (int): Розмірність матриці (кількість вершин графа).
    m (list of list of int): Квадратна матриця розмірності NxN, що містить лише 0 та 1, яка є потенційною матрицею суміжності.

    Повертає:
    str: 'YES', якщо матриця може бути матрицею суміжності неорієнтованого графа, та 'NO' в іншому випадку.

    Опис:
    Матриця суміжності неорієнтованого графа повинна відповідати двом умовам:
    1. Матриця повинна бути симетричною, тобто m[i][j] повинно дорівнювати m[j][i] для всіх i та j.
    2. На головній діагоналі матриці повинні бути лише нулі, оскільки в простому графі немає петель (ребер, що з'єднують вершину саму з собою).
    """
    for i in range(n):
        for j in range(n):
            if m[i][j] != m[j][i]:
                # Якщо матриця не симетрична, повертаємо 'NO'
                return 'NO'
    if sum(m[i][i] for i in range(n)) != 0:
        return 'NO'
    return 'YES'


def main():
    n = int(input())
    for _ in range(n):
        s = int(input())
        m = [list(map(int, input().split())) for _ in range(s)]
        print(solution(s, m))


if __name__ == '__main__':
    main()
