def calculate_weights(N, m1, mN, d):
    """
    Обчислює ваги всіх сніжок, використовуючи бінарний пошук для визначення ваги другої сніжки.

    Параметри:
    N (int): Кількість сніжок.
    m1 (float): Вага першої сніжки.
    mN (float): Вага останньої сніжки.
    d (float): Різниця між вагою проміжної сніжки та середньою вагою її сусідів.

    Складність:
    O(N) тому що при складності N*log(R), де R - діапазон значень, що шукаються (ваги сніжок) є константним.

    Повертає:
    list of float: Список ваг для всіх сніжок.
    """
    # Початкові межі для бінарного пошуку
    l, r = -1e7, 1e7
    # Бінарний пошук для знаходження ваги другої сніжки
    while r - l > 1e-7:
        m2 = l + (r - l) / 2
        # Ініціалізуємо список ваг з першими двома значеннями
        weights = [m1, m2]
        # Обчислюємо ваги для всіх сніжок
        for i in range(2, N):
            # Обчислюємо вагу наступної сніжки за попередніми двома
            mi_plus1 = 2 * weights[-1] - weights[-2] - 2 * d
            weights.append(mi_plus1)
        # Перевіряємо, чи обчислена вага останньої сніжки наближається до mN
        if abs(weights[-1] - mN) < 1e-7:
            return weights
        # Якщо обчислена вага більше за mN, змінюємо праву межу
        if weights[-1] > mN:
            r = m2
        else:
            # Якщо обчислена вага менше за mN, змінюємо ліву межу
            l = m2
    # Повертаємо обчислені ваги
    return weights


def solution(N, m1, mN, d, I, J, K):
    """
    Обчислює вагу Снігової Баби, сформованої зі сніжок.

    Є N сніжок, пронумерованих від 1 до N. Відомі ваги першої (m1) та останньої (mN) сніжок.
    Вага кожної проміжної сніжки перевищує середню вагу її сусідів на значення d.

    Параметри:
    N (int): Кількість сніжок.
    m1 (float): Вага першої сніжки.
    mN (float): Вага останньої сніжки.
    d (float): Різниця ваги між проміжною сніжкою та середньою вагою її сусідів.
    I (int): Індекс першої сніжки у Сніговій Бабі.
    J (int): Індекс другої сніжки у Сніговій Бабі.
    K (int): Індекс третьої сніжки у Сніговій Бабі.

    Повертає:
    float: Загальна вага Снігової Баби з сніжок з індексами I, J і K.
    """
    # Приводимо індекси I, J, K до цілого типу
    I, J, K = int(I), int(J), int(K)
    # Обчислюємо ваги всіх сніжок
    weights = calculate_weights(int(N), m1, mN, d)
    # Обчислюємо загальну вагу трьох заданих сніжок
    weight = weights[I - 1] + weights[J - 1] + weights[K - 1]
    # Повертаємо загальну вагу з точністю до 4 десяткових знаків
    return f"{weight:.4f}"


def main():
    N, m1, mN, d, I, J, K = map(float, input().split())
    print(solution(N, m1, mN, d, I, J, K))


if __name__ == '__main__':
    main()
